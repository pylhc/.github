# Caller Template Extended -----------------------------------------------------

# # Runs all tests in two steps: the basic tests and the "extended" tests
# name: Tests

# defaults:
#   run:
#     shell: bash

# on:  # Runs on any push event to any branch except master (the coverage workflow takes care of that)
#   push:
#     branches-ignore:
#       - 'master'

# jobs:
#     basic-tests:
#       uses: pylhc/.github/.github/workflows/tests.yml@master
#       with:
#         pytest-options: -m "not extended and not cern_network"

#     extended-tests:
#       needs: basic-tests
#       uses: pylhc/.github/.github/workflows/tests.yml@master
#       with:
#         pytest-options: -m "extended and not cern_network"

# ------------------------------------------------------------------------------
name: Reusable Testing

on:
  workflow_call:
    inputs:
      pytest-options:
        required: false
        type: string
      extra-dependencies:
        required: false
        type: string
        default: test
      dependency-file:
        required: false
        type: string
        default: pyproject.toml
      cancel-in-progress:
        required: false
        type: boolean
        default: false

# Cancel (by default) in-progress workflows when pushing a new commit on the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ inputs.cancel-in-progress }}

env:
  UV_COMPILE_BYTECODE: 1

defaults:
  run:
    shell: bash

jobs:
  tests:
    name: ${{ matrix.os }} / ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04, ubuntu-24.04, macos-latest, windows-latest]
        # We escape with quotes so it doesn't get interpreted as float (e.g. 3.10 -> 3.1 by GA's parser)
        python-version: ["3.10", "3.11", "3.12", "3.13", "3.14"]  # add new versions when they are released

    steps:
      - uses: actions/checkout@v4

      - if: matrix.os == 'macos-latest'
        name: Set up hdf5
        run: brew install hdf5

      - name: Install uv and Python
        uses: astral-sh/setup-uv@v6
        with:
          python-version: ${{ matrix.python-version }}
          enable-cache: true
          activate-environment: true
          cache-dependency-glob: '${{ inputs.dependency-file }}'

      # The uv pip should make & use an env from the Python install of the previous step
      - name: Install package
        run: uv pip install '.[${{ inputs.extra-dependencies }}]'

      - name: Run Tests
        run: python -m pytest ${{ inputs.pytest-options }}
