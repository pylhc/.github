# Caller Template --------------------------------------------------------------

# # Runs all tests and runs a coverage report via python-coverage-comment-action.
# name: Coverage

# on:  # Runs on all push events to master branch and any push related to a pull request
#   push:
#     branches:
#       - master
#   pull_request:  # so that codeclimate gets coverage and reports on the diff

# jobs:
#   coverage:
#       uses: pylhc/.github/.github/workflows/coverage.yml@master
#       with:
#         src-dir: omc3
#         pytest-options: -m "not cern_network"
#       secrets: inherit

# ------------------------------------------------------------------------------
name: Reusable Testing with Coverage

on:
  workflow_call:
    inputs:
      src-dir:
        required: true
        type: string
      pytest-options:
        required: false
        type: string
      extra-dependencies:
        required: false
        type: string
        default: test
      dependency-file:
        required: false
        type: string
        default: pyproject.toml
      min_coverage: # minimum overall coverage
        required: false
        type: number
        default: 0.80
      min_diff_coverage: # minimum coverage for the diff in a PR
        required: false
        type: number
        default: 0.60
      allowed_coverage_decrease:  # allowed decrease from reference coverage
        required: false
        type: number
        default: 0.05
      minimum_green:  # If above or equal to this value, the badge will be green.
        required: false
        type: number
        default: 90
      minimum_orange: # If above or equal to this value, the badge will be orange.
        required: false
        type: number
        default: 60

env:
  UV_COMPILE_BYTECODE: 1

defaults:
  run:
    shell: bash

jobs:
  coverage:
    runs-on: ubuntu-latest
    env:
        python-version: "3.13"
        ALLOWED_COVERAGE_DECREASE: ${{ inputs.allowed_coverage_decrease }}  # allowed decrease from reference coverage
        MIN_COVERAGE: ${{ inputs.min_coverage }}                            # minimum overall coverage
        MIN_DIFF_COVERAGE: ${{ inputs.min_diff_coverage }}                  # minimum coverage for the diff in a PR
        MINIMUM_GREEN: ${{ inputs.minimum_green }}                          # If above or equal to this value, the badge will be green.
        MINIMUM_ORANGE: ${{ inputs.minimum_orange }}                        # Same with orange. Below is red.

    steps:
      - uses: actions/checkout@v5

      - name: Install uv and Python
        uses: astral-sh/setup-uv@v6
        with:
          python-version: ${{ env.python-version }}
          enable-cache: true
          activate-environment: true
          cache-dependency-glob: '${{ inputs.dependency-file }}'

      # The uv pip should make & use an env from the Python install of the previous step
      - name: Install package
        run: uv pip install '.[${{ inputs.extra-dependencies }}]'

      - name: Run all tests
        run: python -m pytest ${{ inputs.pytest-options }} --cov=${{ inputs.src-dir }}

      - name: Coverage comment
        id: coverage_comment
        uses: py-cov-action/python-coverage-comment-action@v3
        with:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Coverage Decrease Calculation
        id: coverage_decrease
        env:
           REF_COVERAGE: ${{ steps.coverage_comment.outputs.reference_percent_covered }}
        run: |
              MIN_ALLOWED=$(echo "${REF_COVERAGE} - ${ALLOWED_COVERAGE_DECREASE}" | bc)
              echo "min_allowed=${MIN_ALLOWED}" >> $GITHUB_OUTPUT

      - name: Check Coverage Decrease
        if: ${{ steps.coverage_comment.outputs.new_percent_covered < steps.coverage_decrease.outputs.min_allowed }}
        env:
           MIN_COVERAGE_ALLOWED: ${{ steps.coverage_decrease.outputs.min_allowed }}
           CURRENT_COVERAGE: ${{ steps.coverage_comment.outputs.new_percent_covered }}
        run: echo "Coverage decreased more than allowed (${CURRENT_COVERAGE} < ${MIN_COVERAGE_ALLOWED})." && exit 1

      - name: Minumum Coverage Check
        if: ${{ steps.coverage_comment.outputs.new_percent_covered < env.MIN_COVERAGE }}
        env:
           CURRENT_COVERAGE: ${{ steps.coverage_comment.outputs.new_percent_covered }}
        run: echo "Coverage is below minimum (${CURRENT_COVERAGE} < ${MIN_COVERAGE})." && exit 1

      - name: Minimum Diff Coverage Check
        if: ${{ steps.coverage_comment.outputs.diff_total_percent_covered < env.MIN_DIFF_COVERAGE }}
        env:
            CURRENT_DIFF_COVERAGE: ${{ steps.coverage_comment.outputs.diff_total_percent_covered }}
        run: echo "Diff coverage is below minimum (${CURRENT_DIFF_COVERAGE} < ${MIN_DIFF_COVERAGE})." && exit 1
